<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.company.app.emp.mapper.EmpMapper">

	<select id="getEmp" resultType="EmpVO">
		SELECT *
		FROM EMPLOYEES
		WHERE EMPLOYEE_ID = #{employeeId}
	</select>
	
	<select id="getEmpList" parameterType="empVO" resultType = "EmpVO">
		SELECT *
		FROM EMPLOYEES
		ORDER BY employee_id
	</select>
	
	<select id="getEmpByDept" parameterType="string" resultType="EmpVO">
		SELECT *
		FROM EMPLOYEES
		WHERE department_id IN
		<foreach collection="array" item="dept" open="(" separator="," close=")">
			#{dept}
		</foreach>
		ORDER BY employee_id
	</select>
	
	<insert id="insert">
		<selectKey keyProperty="employeeId" order="BEFORE" resultType="string">
			select NVL(MAX(employee_id),0)+1 FROM employees
		</selectKey>
		insert into
			employees(employee_id,last_name,email,hire_date,job_id)
			values(employees_seq.nextval, #{lastName},#{email},#{hireDate},#{jobId})
	</insert>
	
	<select id="getEmpReqList" parameterType = "EmpReqVO" resultType="EmpVO">
		SELECT *
		FROM employees
		<where>
			<if test="employeeId != null and employeeId != ''">
				AND employee_id = #{employeeId}
			</if>
			<if test="depts != null">
				AND department_id IN
				<foreach collection="depts" item="dept" open="(" separator="," close=")">
					#{dept}
				</foreach>
			</if>
			<if test="jobId != null and jobId != ''">
				AND job_id = #{jobId}
			</if>
			<if test="sdt != null and edt != null">
				AND hire_date BETWEEN #{sdt} AND #{edt}
			</if>
		</where>
		ORDER BY employee_id
	</select>
	
	<update id="update">
		UPDATE employees
		SET
		<if test="firstName != null and firstName != ''">
			first_name = #{firstName},
		</if>
		<if test="lastName != null and lastName != ''">
			last_name = #{lastName},
		</if>
		<if test="hireDate != null">
			hire_date = #{hireDate},
		</if>
		<if test="email != null and email != ''">
			email = #{email},
		</if>
		<if test="jobId != null and jobId != ''">
			job_id = #{jobId}
		</if>
		WHERE employee_id = #{employeeId}
	</update>
	
	<delete id="delete">
		DELETE employees
		WHERE employee_id = #{employeeId}
	</delete>
	
	<!-- <resultMap type="EmpVO" id="empDeptMap">
		<id column="employee_id" property="employeeId"/>
		<result column="first_name" property="firstName"/>
		<result column="last_name" property="lastName"/>
		<association property="dept" javaType="DeptVO">
			<id column="department_id" property="departmentId"></id>
			<result column="department_name" property="department_name"></result>
			<result column="manager_id" property="manager_id"></result>
			<result column="location_id" property="location_id"></result>
		</association>
	</resultMap> -->
	
	<!-- <select id="getEmpDept" resultMap="empDeptMap">
		SELECT e.*, d.department_name, d.manager_id, d.location_id
		FROM employees e JOIN departments d
		ON e.department_id = d.department_id
	</select> -->
	
	<!-- 해당 사원의 부서정보를 가져오기 -->
	<select id="getEmpDept" resultType="EmpVO">
		SELECT E.EMPLOYEE_ID,
			   E.FIRST_NAME,
			   E.LAST_NAME,
			   E.EMAIL,
			   E.PHONE_NUMBER,
			   E.HIRE_DATE,
			   E.JOB_ID,
			   E.SALARY,
			   E.COMMISSION_PCT,
			   E.MANAGER_ID,
			   D.DEPARTMENT_NAME "dept.department_name",
			   D.LOCATION_ID "dept.location_id",
			   D.MANAGER_ID "dept.manager_id"
		FROM employees e JOIN departments d
		ON e.department_id = d.department_id
		ORDER BY E.EMPLOYEE_ID
	</select>
	
	<!-- 부서마다 회원정보를 가져오기 -->
	<resultMap type="DeptVO" id="deptEmpsMap">
		<id column="department_id" property="departmentId"></id>
		<result column="department_name" property="department_name"></result>
		<result column="manager_id" property="manager_id"></result>
		<result column="location_id" property="location_id"></result>
		<collection property="emp" ofType="EmpVO">
			<id column="employee_id" property="employeeId"/>
			<result column="first_name" property="firstName"/>
			<result column="last_name" property="lastName"/>
			<result column="hire_date" property="hireDate"/>
			<result column="job_id" property="jobId"/>
		</collection>
	</resultMap>
	
	<select id="getDeptEmp" resultMap="deptEmpsMap">
		SELECT
			   D.DEPARTMENT_ID,
			   D.DEPARTMENT_NAME,
			   D.LOCATION_ID,
			   D.MANAGER_ID,
			   E.EMPLOYEE_ID,
			   E.FIRST_NAME,
			   E.LAST_NAME,
			   E.HIRE_DATE,
			   E.JOB_ID
		FROM employees e RIGHT OUTER JOIN departments d
		ON e.department_id = d.department_id
	</select>
</mapper>